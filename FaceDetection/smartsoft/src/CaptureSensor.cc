//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "CaptureSensor.hh"
#include "FaceDetection.hh"

#include <iostream>

CaptureSensor::CaptureSensor(SmartACE::SmartComponent *comp)  // @suppress("Member declaration not found")
:	CaptureSensorCore(comp)
{
	std::cout << "constructor CaptureSensor\n";

	// cascacde initialization
	if (!_cascade.load(_face_cascade_filename)) {
		std::cout << "Couln't load face detector: " << _face_cascade_filename;
	}

}
CaptureSensor::~CaptureSensor() 
{
	std::cout << "destructor CaptureSensor\n";
}



int CaptureSensor::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int CaptureSensor::on_execute()
{
	// this method is called from an outside loop,
	// hence, NEVER use an infinite loop (like "while(1)") here inside!!!
	// also do not use blocking calls which do not result from smartsoft kernel
	
	// to get the incoming data, use this methods:
	Smart::StatusCode status;

	//std::cout << "Hello from CaptureSensor " << std::endl;

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int CaptureSensor::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}


cv::Mat CaptureSensor::getMat(const DomainVision::CommVideoImage &input)
{
	const unsigned char* color_frame;

	color_frame = input.get_data();

	const int w = input.get_width();
	const int h = input.get_height();

	cv::Mat img(cv::Size(w, h), CV_8UC3, (void*)input.get_data());

	return img;
}

std::vector<cv::Rect> CaptureSensor::faceDetect(const cv::Mat& img)
{
	// configuration
	int flags = CV_HAAR_DO_CANNY_PRUNING;
	float search_scale_factor = 1.1f;
	cv::Size minFeatureSize = cv::Size(20, 20);
	cv::Rect rc;

	cv::Mat img_gray;
	std::vector<cv::Rect> rects;

	// image processing
	if (img.channels() > 1) {
		cvtColor(img, img_gray, CV_BGR2GRAY);
	} else {
		img_gray = img;
	}

	// detect all the faces
	_cascade.detectMultiScale(img_gray, rects, search_scale_factor, 3, flags, minFeatureSize);

	return rects;
}

void CaptureSensor::on_RGBImagePushServiceIn(const DomainVision::CommVideoImage &input)
{
	cv::Mat img = getMat(input);

	// detect faces
	std::vector<cv::Rect> face_rect = faceDetect(img);

	// draw box
	for (std::vector<cv::Rect>::iterator iter = face_rect.begin(); iter!=face_rect.end(); iter++) {
		cv::rectangle(img, *iter, cv::Scalar(0, 0, 2), 3, 8, 0);

		// output testing
		std::cout << "[FaceDetection] Boundingbox  x"<< iter->x <<", y:"<< iter->y <<", width:" << iter->width << ", height" << iter->height << std::endl;
	}

	// convert from mat to CommVideoImage
	const unsigned char* img_out = (unsigned char*)img.data;
	int w = img.cols;
	int h = img.rows;

	DomainVision::CommVideoImage output;
	output.set_parameters(w, h, DomainVision::FormatType::RGB24);
	output.set_data(img_out);

	COMP->rGBImagePushServiceOut->put(output);


}

