//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------

#ifndef FACEDETECTION_PORTFACTORYINTERFACE_HH_
#define FACEDETECTION_PORTFACTORYINTERFACE_HH_

// include communication objects
#include <CommPerception/CommLabel.hh>
#include <CommPerception/CommLabelACE.hh>
#include <CommPerception/CommPersonDetection.hh>
#include <CommPerception/CommPersonDetectionACE.hh>
#include <DomainVision/CommRGBDImage.hh>
#include <DomainVision/CommRGBDImageACE.hh>
#include <DomainVision/CommVideoImage.hh>
#include <DomainVision/CommVideoImageACE.hh>
#include <CommPerception/Empty.hh>
#include <CommPerception/EmptyACE.hh>

#include <chrono>

// include component's main class
#include "FaceDetection.hh"

// forward declaration
class FaceDetection;

class FaceDetectionPortFactoryInterface {
public:
	FaceDetectionPortFactoryInterface() { };
	virtual ~FaceDetectionPortFactoryInterface() { };

	virtual void initialize(FaceDetection *component, int argc, char* argv[]) = 0;
	virtual int onStartup() = 0;

	virtual Smart::IPushClientPattern<DomainVision::CommRGBDImage> * createRGBDImagePushServiceIn() = 0;
	virtual Smart::IQueryClientPattern<DomainVision::CommVideoImage, CommPerception::CommLabel,SmartACE::QueryId> * createRecognitionQueryServiceReq() = 0;
	
	virtual Smart::IQueryServerPattern<CommPerception::Empty, CommPerception::CommPersonDetection,SmartACE::QueryId> * createPersonQueryServiceAnsw(const std::string &serviceName) = 0;
	virtual Smart::IPushServerPattern<DomainVision::CommVideoImage> * createRGBImagePushServiceOut(const std::string &serviceName) = 0;

	virtual int onShutdown(const std::chrono::steady_clock::duration &timeoutTime=std::chrono::seconds(2)) = 0;
	virtual void destroy() = 0;
};

#endif /* FACEDETECTION_PORTFACTORYINTERFACE_HH_ */
