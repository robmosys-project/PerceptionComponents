//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// This file is generated once. Modify this file to your needs. 
// If you want the toolchain to re-generate this file, please 
// delete it before running the code generator.
//--------------------------------------------------------------------------
#include "Spin.hh"
#include "ROSBridge.hh"

#include <iostream>

Spin::Spin(SmartACE::SmartComponent *comp) 
:	SpinCore(comp)
{
	ros::NodeHandle priv("~");

	//chatter_pub = n.advertise<std_msgs::String>("chatter", 1);
	 object_server  = priv.advertiseService("active", &Spin::object_detection, this);
}
Spin::~Spin() 
{
	std::cout << "destructor Spin\n";
}


int Spin::on_entry()
{
	// do initialization procedures here, which are called once, each time the task is started
	// it is possible to return != 0 (e.g. when initialization fails) then the task is not executed further
	return 0;
}
int Spin::on_execute()
{

	Smart::StatusCode status;

    if(ros::ok())
        ros::spinOnce();

	// it is possible to return != 0 (e.g. when the task detects errors), then the outer loop breaks and the task stops
	return 0;
}
int Spin::on_exit()
{
	// use this method to clean-up resources which are initialized in on_entry() and needs to be freed before the on_execute() can be called again
	return 0;
}


bool Spin::object_detection(robmosys_srvs::objectinformation::Request  &req, robmosys_srvs::objectinformation::Response &res)
{
	std::cout << "object_detection service\n";

	return true;
}
